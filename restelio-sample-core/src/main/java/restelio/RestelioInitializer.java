package restelio;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import restelio.Restelio.HttpMethod;
import restelio.filter.SecurityFilter;
import restelio.router.RouteRegistry.RouteCallback;
import restelio.sample.core.SampleResource;
import restelio.support.RequestContext;

/**
 * This is the initializer class that will be generated by the annotation processor
 */
public class RestelioInitializer {

    static final Logger log = LoggerFactory.getLogger(RestelioInitializer.class);

    private static final String PATTERN_MATCH_ALL = "/*";

    private Restelio restelio;

    public RestelioInitializer(Restelio restelio) {
        this.restelio = restelio;
    }

    public void initialize() {
        log.info("Initializing default components...");
        initializeDefaultComponents();

        log.info("Initializing filters...");
        initializeFilterChain();

        log.info("Initializing routes...");
        initializeRouteRegistry();
    }

    private void initializeDefaultComponents() {
        restelio.registerFilter(PATTERN_MATCH_ALL, Integer.MIN_VALUE, new SecurityFilter());
    }

    private void initializeRouteRegistry() {
        // Instantiate the resource class (with DI parameters)
        SampleResource instance = new SampleResource();

        restelio.registerRoute(HttpMethod.GET, "/route/get", instance, new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(HttpMethod.POST, "/route/post", instance, new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(HttpMethod.PUT, "/route/put", instance, new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(HttpMethod.DELETE, "/route/delete", instance, new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });
    }

    private void initializeFilterChain() {

    }

}
