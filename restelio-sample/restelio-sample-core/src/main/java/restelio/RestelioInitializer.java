/*
 * Copyright 2014 Matteo Giaccone and contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package restelio;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import restelio.Restelio.HttpMethod;
import restelio.filter.GZipResponseFilter;
import restelio.router.RouteRegistry.RouteCallback;
import restelio.sample.core.SampleResource;
import restelio.support.RequestContext;

/**
 * This is the initializer class that will be generated by the annotation processor
 */
public class RestelioInitializer {

    static final Logger log = LoggerFactory.getLogger(RestelioInitializer.class);

    // TODO: REMOVE ME
    private static final String PATTERN_MATCH_ALL = "/*";

    private Restelio restelio;

    public RestelioInitializer(Restelio restelio) {
        this.restelio = restelio;
    }

    public void initialize() {
        log.info("Initializing filters...");
        initializeFilterChain();

        log.info("Initializing routes...");
        initializeRouteRegistry();
    }

    private void initializeRouteRegistry() {
        // Instantiate the resource class (with DI parameters)
        SampleResource instance = new SampleResource();

        restelio.registerRoute(instance, HttpMethod.GET, "/route/get", new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(instance, HttpMethod.POST, "/route/post", new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(instance, HttpMethod.PUT, "/route/put", new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });

        restelio.registerRoute(instance, HttpMethod.DELETE, "/route/delete", new RouteCallback() {
            @Override
            public void execute(Object instance, RequestContext context) {

            }
        });
    }

    private void initializeFilterChain() {
        restelio.registerFilter(new GZipResponseFilter(), 0, PATTERN_MATCH_ALL, HttpMethod.GET);
    }

}
