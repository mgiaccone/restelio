buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:+"
    }
}

ext {
    guavaVersion    = "17.0"
    jacocoVersion   = "0.7.1.201405082137"
    logbackVersion  = "1.1.2"
    jacksonVersion  = "2.4.1.1"
    junitVersion    = "4.11"
    servletVersion  = "2.5"
    slf4jVersion    = "1.7.7"

    frameworkProjects = subprojects.findAll {
        it.name == 'restelio-admin-gui' ||
        it.name == 'restelio-core' ||
        it.name == 'restelio-datastore-core' ||
        it.name == 'restelio-security-basic' ||
        it.name == 'restelio-security-core' ||
        it.name == 'restelio-security-oauth2' ||
        it.name == 'restelio-http-servlet' ||
        it.name == 'restelio-http-netty'
    }
}

// All projects
allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    group = "restelio"
    version = '1.0.0'

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'

    // Java Compiler
    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }
}

// Framework projects configuration
configure(project.frameworkProjects) {
    apply plugin: "cobertura"
    apply plugin: "jacoco"

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}",
                "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

        testCompile "junit:junit:${junitVersion}",
                "ch.qos.logback:logback-core:${logbackVersion}",
                "ch.qos.logback:logback-classic:${logbackVersion}"
    }

    jar {
        manifest.attributes provider: 'Ubiqueworks Ltd'
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }

    cobertura {
        coverageFormats = ['html', 'xml']

        coverageExcludes = ['.*restelio.*Exception']
        coverageIgnoreTrivial = true

        rootProject.subprojects.each {
            coverageDirs << file("${it.name}/build/classes/main")
        }
    }
}